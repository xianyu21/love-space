"use strict";var e=Object.defineProperty,t=Object.getOwnPropertySymbols,r=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable,l=(t,r,o)=>r in t?e(t,r,{enumerable:!0,configurable:!0,writable:!0,value:o}):t[r]=o,n=(e,n)=>{for(var i in n||(n={}))r.call(n,i)&&l(e,i,n[i]);if(t)for(var i of t(n))o.call(n,i)&&l(e,i,n[i]);return e},i=require("../theme/theme.js"),a=require("./interface.js");const d={_style:{type:[Array,String,Object],default:()=>[]},_class:{type:[Array,String],default:""},color:{type:String,default:"primary"},followTheme:{type:[Boolean,String],default:!1},dark:{type:[Boolean,String],default:!1},followDark:{type:[Boolean,String],default:!0},round:{type:[Number],default:0},shadow:{type:[Number],default:0},outlined:{type:[Boolean],default:!1},border:{type:[Number],default:0},borderStyle:{type:[String],default:a.borderStyle.solid,validator:e=>{let t=["dashed","dotted","solid"];return t.includes(e)||console.error("边线类型只能为borderStyle中的一种。"),t.includes(e)}},borderDirection:{type:String,default:a.cssDirection.all,validator:e=>{let t=["all","bottom","bottomleft","bottomright","left","leftright","right","right","top","topbottom","topleft","topright","x","y"];return t.includes(e)||console.error("边线方向格式只能为cssDirection中的一种。"),t.includes(e)}},text:{type:[Boolean,String],default:!1},transprent:{type:[Boolean,String],default:!0},linear:{type:[String],default:a.linearDirection.none,validator:e=>{let t=["left","right","bottom","top",""];return t.includes(e)||console.error("渐变方向只能为,left:右->左，right:左->右。top:下->上，bottom:上->下,中的一种。"),t.includes(e)}},linearDeep:{type:[String],default:a.linearDeep.light,validator:e=>{let t=["accent","dark","light"];return t.includes(e)||console.error("渐变方向只能为light,dark,accent中的一种。"),t.includes(e)}},isDisabledRoundAndriod:{type:[Boolean,String],default:!1},blur:{type:Boolean,default:!1}};exports.computedClass=e=>{const t=e._class;return"string"==typeof t?t:Array.isArray(t)?t.join(" "):""},exports.computedDark=(e,t)=>{const r=e.followDark,o=e.dark,l=t.dark;return r?l:o},exports.computedStyle=e=>{const t=e._style;if("string"==typeof t){let e=t.split(";").map((e=>{let t={},r=(e=e.replace(";","")).split(":");return t[r[0]]=r[1],t})),r={};return e.forEach((e=>{r=n(n({},r),e)})),r}if("object"==typeof t&&!Array.isArray(t))return t;if("object"==typeof t&&Array.isArray(t)){let e={};return t.forEach((t=>{e=n(n({},e),t)})),e}return{}},exports.computedTheme=(e,t,r)=>{const o=e.color,l=e.border,n=e.shadow,a=e.round,d=e.outlined,s=e.text,u=e.borderStyle,p=e.borderDirection,c=e.linear,y=e.linearDeep,f=e.blur;i.theme.isCssColor(o)&&console.error("不支持自定义组件上的颜色值，请在theme/theme.js中添加自定义的颜色值为主题。当前已切换为primary主题。");let b=o||"primary";return 1==(null==e?void 0:e.followTheme)&&r.color&&(b=r.color),new i.theme.themeColors(r.colorList).getTheme({colorname:b,dark:t,borderWidth:l,shadow:parseInt(String(n)),round:parseInt(String(a)),outlined:!!d,text:!!s,borderStyle:u,borderDirection:p,linearDirection:c,linearDeep:y,blur:f})},exports.custom_props=d;
